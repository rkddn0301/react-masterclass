
※ 설치

* styled-components 설치 : npm i styled-components
+ typeScript 인식용 설치 : npm i --save-dev @types/styled-components
+ vsCode EXTENSIONS에서 `vscode-styled-components`를 설치해주면 코딩 할 때 편리함.

* typeScript 설치
- URL : https://create-react-app.dev/docs/adding-typescript/
- 새로 생성 : npx create-react-app my-app --template typescript
- 기존 JavaScript CRA에서 생성 : npm install --save typescript @types/node @types/react @types/react-dom @types/jest

* react-query 설치 : npm i react-router-dom react-query
+ typeScript 인식용 설치 : npm i --save-dev @types/react-router-dom


※ 용어

* @문법 Pseudo Selector `${}` : JavaScript에서 사용하는 템플릿 리터럴 문법으로, 변수나 표현식을 문자열 내에 삽입하는데 사용.

* @컴포넌트 styled-components : React 식 CSS
EX) styled 기초
    const Father = styled.div`
        display: flex;
    `;

    function App() {
    return (
        <Father>
            <div style={{ backgroundColor: "teal", width: 100, height: 100 }}></div>
            <div style={{ backgroundColor: "tomato", width: 100, height: 100 }}></div>
        </Father>
    );
    }
--> div 태그로된 컴포넌트를 `Father`로 만들어 return에 대입시키는 방식이 styled-components이다.

EX) styled의 props와 components
    const Box = styled.div`
    background-color: ${(props) => props.bgcolor};
    width: 100px;
    height: 100px;
    `;

    const Circle = styled(Box)`
    border-radius: 50px;
    `;

    function App() {
    return (
        <Father>
        <Box bgcolor="teal" />
        <Circle bgcolor="tomato" />
        </Father>
    );
    }
--> Box와 같이 props를 생성하여 배경색 지정을 return에서 할 수 있게 전달할 수 있다.
--> Circle과 같이 Box styled를 그대로 가져와 원형이라는 추가 속성만 만들 수 있다.

EX) styled의 태그 변경
    const Btn = styled.button`
        color: white;
        background-color: tomato;
        border: 0;
        border-radius: 15px;
    `;

    function App() {
    return (
        <Father>
            <Btn>Log in</Btn>
            <Btn as="a">Log in</Btn>
        </Father>
    );
    }
--> Btn은 button 태그로 시작하였으나 return에서 `as`속성을 사용하면 태그를 변경할 수 있다.

EX) styled의 속성 지정
    const Input = styled.input.attrs({ required: true, maxLength: 10 })`
        background-color: tomato;
    `;
--> `attrs`를 통해 Input 컴포넌트를 이용하면 무조건 required, maxLength가 적용된다.

EX) 애니메이션 (네모 --> 동그라미 --> 네모)
    const rotationAnimation = keyframes`
        0% {
        transform:rotate(0deg);
        border-radius: 0px;
        }
        50% {
        transform:rotate(360deg);
        border-radius: 100px;
        }

        100% {
        transform:rotate(0deg);
        border-radius: 0px;
        }
    `;

    // linear : 애니메이션 속도가 일정하게 유지되도록 설정
    // infinite : 애니메이션이 무한반복되도록 설정
    const Box = styled.div`
        height: 200px;
        width: 200px;
        background-color: tomato;
        animation: ${rotationAnimation} 1s linear infinite;
    `;

    function App() {
    return (
        <Wrapper>
            <Box></Box>
        </Wrapper>
    );
    }
--> `keyframes`를 통해 애니메이션 styled를 생성
--> rotationAnimation 내용을 Box가 Pseudo Selector인 `${}`를 통해 가져감

EX) 자식 요소 styled components 지정

    const Emoji = styled.span`
        font-size: 36px;
    `;

    const Box = styled.div`
        ${Emoji} {
        &:hover {
            font-size: 98px;
            }
        }
    `;
--> Emoji로 지정한 styled components를 Box에서 Pseudo Selector인 `${}`로 가져와 지정할 수 있다.

EX) theme : 기본적으로 모든 색상들을 가지고 있는 Object.
- index.js
    const darkTheme = {
        textColor: "whitesmoke",
        backgroundColor: "#111",
    };

    const lightTheme = {
        textColor: "#111",
        backgroundColor: "whitesmoke",
    };

    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(
        <ThemeProvider theme={darkTheme}>
            <App />
        </ThemeProvider>
    );

- App.js
    const Wrapper = styled.div`
        display: flex;
        height: 100vh;
        width: 100vw;
        justify-content: center;
        align-items: center;
        background-color: ${(props) => props.theme.backgroundColor};
    `;

    const Title = styled.h1`
        color: ${(props) => props.theme.textColor};
    `;

    function App() {
        return (
            <Wrapper>
            <Title>Hello</Title>
            </Wrapper>
        );
    }
--> `ThemeProvider`를 통해 자식 컴포넌트(App)에 theme props를 넘길 수 있다.
--> App.js에서 받은 theme props를 지정하면 index.js에서 theme props를 바꿀 때마다 같이 변경된다.

* createGlobalStyle : styled-components에 있으며, 한 컴포넌트 스타일을 전역에 뿌려주는 메소드


* interface : typescript에서 props가 어떤건지 알려줄 때 쓰는 방식
EX) 기초
    interface CircleProps {
        bgColor: string;
        borderColor?: string;
    }

    function Circle({bgColor} : CircleProps) {
    return <Container />;
    }
--> Props를 위와같이 interface로 지정해주고 아래에서 props를 선언하면 `CircleProps` 거라고 typescript에게 알린다.
--> `borderColor`와 같이 `?`을 넣어주면 무조건 해당 props를 입력하지 않아도 된다.

 * react-query : 